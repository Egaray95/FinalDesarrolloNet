//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicaP2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDCLINICAEntities : DbContext
    {
        public BDCLINICAEntities()
            : base("name=BDCLINICAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Consulta> Consulta { get; set; }
        public virtual DbSet<Especialidad> Especialidad { get; set; }
        public virtual DbSet<HistClinico> HistClinico { get; set; }
        public virtual DbSet<Paciente> Paciente { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<TipoTrabajador> TipoTrabajador { get; set; }
        public virtual DbSet<Trabajador> Trabajador { get; set; }
        public virtual DbSet<ConfigButton> ConfigButton { get; set; }
        public virtual DbSet<ConfigMenu> ConfigMenu { get; set; }
    
        public virtual int InsertConsulta(Nullable<int> codpaciente, Nullable<int> codtrabajador, Nullable<System.DateTime> fechaconsulta)
        {
            var codpacienteParameter = codpaciente.HasValue ?
                new ObjectParameter("codpaciente", codpaciente) :
                new ObjectParameter("codpaciente", typeof(int));
    
            var codtrabajadorParameter = codtrabajador.HasValue ?
                new ObjectParameter("codtrabajador", codtrabajador) :
                new ObjectParameter("codtrabajador", typeof(int));
    
            var fechaconsultaParameter = fechaconsulta.HasValue ?
                new ObjectParameter("fechaconsulta", fechaconsulta) :
                new ObjectParameter("fechaconsulta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsulta", codpacienteParameter, codtrabajadorParameter, fechaconsultaParameter);
        }
    
        public virtual int InsertEspecialidad(string esepecialidad, Nullable<double> esprecio)
        {
            var esepecialidadParameter = esepecialidad != null ?
                new ObjectParameter("esepecialidad", esepecialidad) :
                new ObjectParameter("esepecialidad", typeof(string));
    
            var esprecioParameter = esprecio.HasValue ?
                new ObjectParameter("esprecio", esprecio) :
                new ObjectParameter("esprecio", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEspecialidad", esepecialidadParameter, esprecioParameter);
        }
    
        public virtual int insertPaciente(string nombre, string apellido, string dni, string ruc, string telefono, string correo, Nullable<bool> genero, Nullable<System.DateTime> fechana)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var rucParameter = ruc != null ?
                new ObjectParameter("ruc", ruc) :
                new ObjectParameter("ruc", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var generoParameter = genero.HasValue ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(bool));
    
            var fechanaParameter = fechana.HasValue ?
                new ObjectParameter("fechana", fechana) :
                new ObjectParameter("fechana", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertPaciente", nombreParameter, apellidoParameter, dniParameter, rucParameter, telefonoParameter, correoParameter, generoParameter, fechanaParameter);
        }
    
        public virtual int InsertTrabajador(string nombre, string apellido, string dni, string ruc, string telefono, string correo, Nullable<bool> genero, Nullable<int> especialidad, Nullable<int> trahoras, string trausuario, string tracontrasena)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var rucParameter = ruc != null ?
                new ObjectParameter("ruc", ruc) :
                new ObjectParameter("ruc", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var generoParameter = genero.HasValue ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(bool));
    
            var especialidadParameter = especialidad.HasValue ?
                new ObjectParameter("especialidad", especialidad) :
                new ObjectParameter("especialidad", typeof(int));
    
            var trahorasParameter = trahoras.HasValue ?
                new ObjectParameter("trahoras", trahoras) :
                new ObjectParameter("trahoras", typeof(int));
    
            var trausuarioParameter = trausuario != null ?
                new ObjectParameter("trausuario", trausuario) :
                new ObjectParameter("trausuario", typeof(string));
    
            var tracontrasenaParameter = tracontrasena != null ?
                new ObjectParameter("tracontrasena", tracontrasena) :
                new ObjectParameter("tracontrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTrabajador", nombreParameter, apellidoParameter, dniParameter, rucParameter, telefonoParameter, correoParameter, generoParameter, especialidadParameter, trahorasParameter, trausuarioParameter, tracontrasenaParameter);
        }
    
        public virtual ObjectResult<ListarMedicos_Result> ListarMedicos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarMedicos_Result>("ListarMedicos");
        }
    
        public virtual ObjectResult<ListarConsultasPorMedico_Result> ListarConsultasPorMedico(Nullable<int> codMedico, Nullable<int> estadoconsulta)
        {
            var codMedicoParameter = codMedico.HasValue ?
                new ObjectParameter("codMedico", codMedico) :
                new ObjectParameter("codMedico", typeof(int));
    
            var estadoconsultaParameter = estadoconsulta.HasValue ?
                new ObjectParameter("estadoconsulta", estadoconsulta) :
                new ObjectParameter("estadoconsulta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarConsultasPorMedico_Result>("ListarConsultasPorMedico", codMedicoParameter, estadoconsultaParameter);
        }
    
        public virtual ObjectResult<ListButton_Result> ListButton(Nullable<int> tipTrabajador)
        {
            var tipTrabajadorParameter = tipTrabajador.HasValue ?
                new ObjectParameter("tipTrabajador", tipTrabajador) :
                new ObjectParameter("tipTrabajador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListButton_Result>("ListButton", tipTrabajadorParameter);
        }
    }
}
